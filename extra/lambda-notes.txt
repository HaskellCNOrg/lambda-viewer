Notes on Lambda Calculus 
========

(collected from Weibo posts by @九瓜)

我们在刚接触陌生的知识时，尤其是抽象点的，往往有畏难的情绪。这就对了，因为抽象思考从来都是不容易的，所以我们还需要有动力来推动自己。现在我告诉你，λ演算很有趣。如果仅此一条就能够成为你的动力，那么欢迎来到#λ讲堂#！无需任何编程经验，甚至数学也只要一点点。

#λ讲堂# (1) λ演算简单讲就是关于λ表达式 (λ expression) 的一套演算规则。λ表达式经常也被叫做λ项 (λ term)，只有三种形态，变元/抽象/应用。而演算规则也不多，主要就两条。我们只要进一步理解这些定义和规则，很快就能体会到三生万物的玄妙了。 

因为是一些抽象的东西，我们不妨先把遇到的名词从约定俗成的概念里面剥出来，仅仅把它们当作是单个的词，然后赋予相应的定义。但凡没有给出定义的，一律不要被动接受，要来质问我！

#λ讲堂# (2) 先讲什么是λ项(λ term)。1. 变元是λ项，通常用小写字母写出来，比如 x,y,z 等; 2. 如果 M 是λ项，那么 λx.M 也是；3. 如果 M 和 N 都是λ项，那么 M N 也是。

变元 (variable) 形态的λ项很简单，就是 x 或者 y 或者 z 或者什么别的，我们通常用单个小写字母，有时候也加上数字脚标，比如 x0, x1, x2 等，以示区分。

抽象 (abstraction) 形态的λ项，写出来就是先用λ这个符号本身作开头，后面跟一个变元，然后一个小点，然后跟一个任意的λ项。例如 λx.x 或 λx.y 或 λx.x x 等。

应用 (application) 形态的λ项，就是两个λ项写在一起，中间仅留一个空格做分隔。例如 f x 或者 x x。写在前面的λ项通常叫函数(function)，后面的叫参数(argument)。比如在 x x 这个表达式里，就是把 x 这个函数作用于(apply to)它自己。

#λ讲堂# (3) 在实际书写抽象和应用两种λ项时，如果没有一定的标识，往往会产生歧义。所以通常是用括号来把一个λ项和它前后的符号区分开，比如 (λx.x) y 这个表达式，就是说函数 λx.x 作用在参数 y 上。我们通常不认为括号本身是λ项的一部分，使用它们纯粹是为了书写。

括号的使用有时候也可以略去。约定俗成的习惯是在表达抽象时，小点后面整个式子（除非是遇到反括号）都是与小点前面的变元对应的λ项。比如 λx.(λy.(x y)) 就可以简写为 λx.λy.x y；在表达应用时则向左结合，比如 f x y 应该被理解为 (f x) y 而不是 f (x y)。

#λ讲堂# (4) 以下哪些是正确的λ项？[1] a b c d e f [2] (g h) (i j) [3] λx.(x+1) [4] λx.f (λy.f y) [5] λ(x y).y [6] λ(λx.x).y [7] (λf.f x y) (λx.λy.x) [8] λx.y.x [9] f g λx.y z

#λ讲堂# (5) 可能如果我们不谈到函数和参数这种广义名称，会更容易理解一些。所谓变元(variable)，无非就是一些彼此不一样的个体，是最基本的无结构的λ项。而抽象(abstraction)和应用(application)则给出了两种不同形态的结构，可以通过简单的λ项来组建复杂的λ项。

#λ讲堂# (6) 把以下的λ项在恰当的地方加上括号来帮助理清它们的结构(不要加太多）。比如我们可以把 λx.λy.x y 写成 λx.(λy.(x y))，两者结构一样，后者看起来更清晰。[1] a b c d e f [2] λx.λy.λz.z y x [3] f g λx.y z [4] λx.x λy.y λz.z

#λ讲堂# (7) 对λ項的结构还有疑问的，可以去 http://sinaurl.cn/hbrYEG 看看，可以把任何λ項转成一个树状图片显示出里面的结构。

#λ讲堂# (8) 题外话。我们中学都学过自然归纳法，就是先证明n=0的时候成立，然后假设n=k的时候成立去求证当n=k+1的情况。这和λ项的定义有什么相似之处吗？

#λ讲堂# (9) 现在我们已经知道λ项的定义了，很形而下。但是仅仅知道了定义的我们显然不能够满意，我们还要问：λ项到底表示的是个什么意思？在解答这个问题之前，我们不妨先思考一下，什么是“意思”？这个形而上的问题，请大家自由讨论！

When we ask what is the meaning of something, what do we really mean by "meaning"?

穷爸爸富爸爸大家都看过吧？里面有一句话 intelligence is the ability to make finer distinctions. 这种能力是否就是智力姑且不论，但是当我们说 A 和 B 不一样的时候，至少代表我们对它们所代表的东西有所理解，比一概不知要进一步。

#λ讲堂# (10) 回到λ项上面来，尽管我们还无从理解它的意思，但至少可以试着判断一下两个λ项是否相等。一个最便宜的办法就是，如果写出来一样那就相等；如果写出来不一样那就不相等，也即 lexical equivalence。但是作为人类，我们是否应该有更高的追求...

#λ讲堂# (11) 这里就要讲到两个基本的公理（axiom），它们是判定λ项是否相等的依据。只有准确无误地理解这两个公理，才能够深入体会λ项的那魔法般的表达能力。第一个公理叫α变换，是针对抽象结构（abstraction）的，不过我们要先学习一下什么叫绑定和自由变元。

#λ讲堂# (12) 在 λx.M 中，紧跟λ符号之后的x，叫形式参数（formal parameter）简称形参（parameter）。所有出现在M里的x，都被当前这个λ的形参x所绑定，除非还有内层的λ抽象也绑定了x。举例：λx.(x (λy.(x (λx.x)))) 里面，只有第2和第3个x是被第1个x（形参）绑定。

绑定的概念也可以换一种说法：一个变元只被当前或外层离它最近的同名形参所绑定。所以正确理解λ项的层次结构是重要的基础功课，参见#λ讲堂#第3到第7课。

#λ讲堂# (13) 判断以下λ项中，从左往右第一个抽象里的形参都绑定了哪些变元？请用引号标出，比如 (λx.y "x") x。[1] (λf.λx.f x) f x [2] (λx.x) λy.x λx.y x [3] λx.x λx.(λx.x) x [4] (λx.y z λz.y x z) x y z

#λ讲堂# (14) 一个λ项中没有被任何形参绑定的变元就是自由（free）的。判断以下λ项中，哪些变元是自由的，用引号标出，比如 (λx."y" x) "x"。[1] (λf.λx.f x) f x [2] (λx.x) λy.x λx.y x [3] λx.x λx.(λx.x) x [4] (λx.y z λz.y x z) x y z

#λ讲堂# (15) α变换（α-conversion）是对λ项进行如下操作：把某个形参以及所有它绑定的变元全都替换成一个新的变元。比如 (λx.y x) x 就可以通过α变换得到 (λz.y z) x，这个变换的过程简写为 (λx.y x) => (λz. y z) x，其中 => 代表做一次α变换。

如果我们把λ项和数学函数非正式地联系一下，λ的抽象相当于构建了一个函数，比如 λx.x 相当于定义了 f(x)=x 这个等值函数，而α变换则可以把前述 f 的定义改写成 f(y)=y

λ项不仅可以用来构建函数(function introduction)，还可以用来解构函数(function elimination)，接下来我们就会讲到。

广义的λ项允许加入数学运算符，即便如此，也并非所有数学函数都可以用这种方式表达出来。这涉及到哥德尔不完备定理，以后会讲到。

#λ讲堂# (16) 公理一：α变换不改变λ项代表的意思，这也叫做α等价（α-equivalence）。判断以下的λ项是否为α等价：[1] λx.λx.x 和 λy.λx.y [2] λf.λx.f (λy.f x) 和 λf.λy.f (λy.f x) [2] λx.λy.x y 和 λy.λx.y x [3] λx.x λx.(λx.x) x 和 λx.x λy.(λx.x) y

此题换一句话说，就是是否存在一系列的α变换的操作，能够把前一个λ项改写成后一个。不需要严格的证明。

公理一还可以引申为一个略为直观的概念：λ项中的形参的命名不重要，重要的是它的绑定关系。当然这不是一个严格的叙述，只是帮助理解。

#λ讲堂# (17) 在上述α变换的定义中，我们注意到有一个条件就是要替换为“新”（也即原λ项中没有出现过）的变元，实际上这个条件其实过于严格（充分非必要），什么才是一个恰到好处的（充要）条件呢？请大家自由发言！

这是我的解答，假设我们用 y 替换 λx.M 中形参 x 以及被 x 绑定的变元，首先 y 不能是M中已有的自由变元，其次，用于替换的 y
不能被M内部的形参绑定。

#λ讲堂# (18) 如果我们通过使用零次或多次α变换，从一个λ项 M 得到另一个λ项 N（简写为 M =>* N，这里用*表示零次或多次），我们可以反过来从 N 通过α变换得到 M 吗？（也即 N =>* M 成立吗？）

正如我们目光如炬的TA在多达两天以前指出，所谓等价关系（用=表示），就是满足三个条件，自反reflexive(M=M)，对称symmetric(可以由M=N推导出N=M），传递transitive（可以由L=M和M=N推导出L=N）。这里的问题就是问如何证明 =>* 的对称性。

这里我们再次面对什么是公理。如果我们承认关于等价关系的定义为公理，那么“α变换描述的是一个等价关系”这个命题是可以被证明的，则不再需要被划定为一个公理。

#λ讲堂# (19) β归约（β-reduction）是把结构为 (λx.M) N 的λ项（应用中的函数一方正好是一个抽象结构）化简为 M，并将其中被形参 x 绑定的变元都替换为 N。我们把β归约也用 => 表示，比如 (λf.f x) g => g x

如果我们再次把λ项和数学函数非正式地联系一下，β归约有点类似于函数的求值，而替换变元的过程，类似于把变量的值代入到数学表达式里面去。

往后如无特殊说明，=>就代表β归约。之所以用同一个 => 符号，主要是因为纯粹的α变换比较少用到，而且β归约过程中也要用到α变换。

#λ讲堂# (20) 在不改变原有绑定关系的原则下， 前述β归约的步骤中，正确的替换规则是什么？或者先问一个简单一点的问题：有什么情况是要避免发生的吗？

我们还可以注意到，α变换仅仅是把抽象中的的形参和它绑定的变元换成全新的变元，而抽象结构本身并未改变。β归约则不同，归约的结果是把原λ项中的一个抽象结构和一个应用结构消除了。凡是满足β归约条件的地方，我们把它们叫

#λ讲堂# (21) 一个λ项中符合 (λx.M) N 这种结构的地方，叫做β可规约式（β-redex）。以下λ项各有多少个 β-redex？ [1] f (λx.x y) [2] λy.(λf.x x) y [3] (λx.x x)(λx.x x) [4] (λx.(λy.λz.z y) x) p (λx.x) [5] (λf.λx.f (f x)) (λf.λx.f (f x)) f x

#λ讲堂# (22) 对一个λ项 M 进行零或多次β归约得到 N，可以简写为 M =>* N。如果 N 不含任何 β-redex，我们成之为β范式（β-normal form）。前一课里面的λ项 http://t.sina.com.cn/1684815495/wr4kqew5UA 能规约成范式吗？如果能，请写出规约过程。

#λ讲堂# (23) 公理二：如果 M =>* L 且 N =>* L，那么 M 和 N 等价，也叫做β等价（β-equivalence）。注意这个等价关系并非是说 =>* 本身，因为 M =>* N 的反方向（也即 N =>* M )往往是不成立的。

公理二满足传递律（transitivity）吗？也即：是否能够通过M和N满足β等价，N和L满足β等价，证得M和L满足β等价。

更直白的说法：能否通过条件(1)存在一个A，M =>* A, N =>* A 和条件(2)存在一个B，N =>* B , L =>* B，来证明结论：存在一个C，M =>* C 且 L =>* C。

#λ讲堂# (24) 在前面做过的习题里面，β归约往往能够化繁为简达到范式。不过我们也见识过β归约停不下来的例子，比如 (λx.x x)(λx.x x)。其实它还不错哦，至少可以保持身材不变。请举一反三，试着给出一个越减越肥的例子吧！

在一个λ项中可能有多个β-redex，你要先归约哪一个呢？在这个多层的盗梦空间里，是否必须要选对了才能够停下来（达到范式），而选错了就得随着那个陀螺转下去（一直停不下来）？

#λ讲堂# (25) 简单回顾一下，我们从λ项的结构与写法开始，到现在一共学习对它的两种操作（α变换和β归约），以及两种等价关系。基础知识差不多就讲完了！恭喜你坚持到了这里！给自己[鼓掌]！有坚实理论做基础，有趣的事情马上登场了！

#λ讲堂# (26) 有一个叫丘齐的人设计了一个游戏，他一口气写了一串λ项（我们不妨称之为 N0, N1, N2, ...），超牛！因为 N0 f x =>* x，N1 f x =>* f x，N2 f x =>* f (f x)，N3 f x =>* f (f (f x))！！你知道它们都是什么吗？

#λ讲堂# (27) 好吧，能够设计出 N0,N1,N2 这些还不是很牛，那么丘长老接下来又说了：“谁说自然数要写成 0 1 2 3，那些都是死符号，我的这些λ项才是自然数！因为它们是活的！” 言下之意是归约 N f x 可以变出来 N 个 f 作用在 x 上。

#λ讲堂# (28) 先把死活的问题放一边，我们假设自然数是丘长老发明的，那么给定一个 N，怎么表示 N+1 呢？也即，如何设计一个λ项 SUCC，使得归约 (SUCC N) f x 得到的范式里的 f 比归约 N f x 得到要多一个。

#λ讲堂# (29) 对λ項的β归约有疑问的，可以去 http://sinaurl.cn/hbrYEG 看看，不但可以把任何λ項转成一个树状图片显示结构，还可以用鼠标点蓝字，选择不同的redex进行β归约，而且在β归约前也会作适当的α变换。赶快把 (λf.λx.f (f x)) (λf.λx.f (f x)) f x 输进去看看！

#λ讲堂# (30) OK，加一的问题似乎也不是很牛，两岁的娃娃都会做。那么怎么设计一个更灵活的加法呢？也即，如何设计一个λ项 PLUS，使得归约 (PLUS M N) f x 得到的范式里面 f 的数量是归约 M f x 和 N f x 所能得到的总和！哇卡卡！！

#λ讲堂# (31) 如果你没有偷偷去查维基百科就设计出来了PLUS，那你牛的！不过丘长老还是更牛一点，因为他还能做乘法！设计一个λ项 MULT，使归约 (MULT M N) f x 得到的范式里 f 的数量是归约 M f x 和 N f x 所得 f 数量的乘积。

#λ讲堂# (32) 把 (λm.λn.m n) 作用于任意两个用上述λ项表达的自然数 M 和 N，能得到什么？能解释一下为什么吗？

#λ讲堂# (33) 减一的问题：设计一个λ项 PRED，使得 (PRED N) f x 归约得到的 f 比 N f x 要少一个。维基百科给的解答是 λn.λf.λx.n (λg.λh.h (g f)) (λu.x) (λu.u)，建议动手试试看哦。谁来猜猜它的设计思想？

既然@兔山白 已经提前警告大家减法超级难，我就直接给答案好了。

#λ讲堂# (34) 减法难就难在我们无法把一个已知的应用结构拆开来，只能通过构造函数的方法来做。所以说丘长老的牛还不是我们可以比的，因为就是他，Alonzo Church，发明了λ演算。前述表达自然数的方法，就叫作邱奇数(church numerals)。

#λ讲堂# (35) 到这里，我们的邱奇数之旅就告一段落了。在数学上，如果一套系统能够表达自然数及其运算，基本上就可以表达大部分运算了。最后再来一题，(λf.λx.(λg.λx.f (g g x)) (λg.λx.f (g g x)) x) 表达的是 church numeral 里面哪个数？

#λ讲堂# (36) 在第 23 课里我们曾经试图证明β等价满足传递律，@浮生十慵 石破天惊地提出了一个假设“换言之，如果N=>*A, N=>*B，那么存在一个C, A=>*C, B=>*C”，这个假设岂止是成立，简直是非常成立！它还有个名字，叫 Church-Rosser 定理。

具体证明方法就比较复杂，也不是掌握λ演算的重点。Rosser 是 Church 的学生，所以我估计脏活是他干的。顺带再说一句，Turing 也是 Church 的学生，在老师给他审稿（就是图灵机那篇）的时候，证明了图灵机和λ演算可以相互表达。

我们又一次面对什么是公理的问题。如果我们承认关于等价关系的定义（满足自反/对称/传递）为公理，那么公理一和公理二都可以被证明满足这个等价关系，从而只是定理。

#λ讲堂# (37) 从 Church-Rosser 定理还可以推出一个结论，那就是只要一个λ項存在范式的话，无论你先归约它的哪一个 redex，最后总有一条路能够到达范式。在小径分叉的花园，选错一次不要紧，重要的是不要每次都选错。

#λ讲堂# (38) 说到这个小径分叉的花园，当然还有一个大前提，就是要确认存在范式先！不然只有杯具没有钟点... 那么，怎么判断一个λ項最终可以归约到范式呢？请自由讨论！

#λ讲堂# (39) 明察秋毫的@兔山白 多次迫切地要求使用“λx.f x => f”，这也有个名字，叫做η变换（η-conversion，η音eta）。它来自一个观察：对于任意λ项 M，N，若x不是M的自由变元，则 (λx.M x) N => M N。那么问题是 (λx.M x) 和 M 等价吗？

#λ讲堂# (40) 外延性 (extensionality) 等价的定义：当且仅当 f x = g x 对所有的 x 都成立时，f 和 g 等价。所以η变换属于外延性等价，这个和我们通常的等价定义不一样。只有当我们承认外延性等价这个前提时，η变换才是等价的。

#λ讲堂# (41) 回来我们的花园：有没有一种归约顺序，只要存在范式，就总是可以到达范式呢？答案是：每次选择最左边最外层的 redex 就行！这种方法叫做正序（normal order）归约。假如 M =>* N，且 N 是范式，那么存在一个正序归约的步骤把 M 归约到 N。这也叫 Church-Rosser 第二定理。

#λ讲堂# (42) 正序归约表面上看是个很奇怪的顺序，因为通常在数学计算里面，我们总是先把函数的参数算出来，才代入函数式进行计算。这样的次序也有个名字，叫做应序（applicative order）归约，也即每次选择最左最内的 redex 进行归约。

#λ讲堂# (43) 以下λ项是否存在范式？如果存在，正序和应序各需要几次β归约（α和η变换不计在内）？ [1] (λx.λy.y) ((λx.x x) (λx.x x)) [2] (λf.f (f x)) ((λx.λy.x) (λx.y)) [3] (λf.λx.f (f x)) (λf.λx.f (f x)) (λx.x) (λx.x)

#λ讲堂# (44) 在小径分叉的花园里，假设存在终点（也即范式），要怎么选择才是最优的呢（也即β归约的次数最少）？是正序吗？是应序吗？举几个例子吧！

#λ讲堂# (45) 经过长达两天的休整，我们迎来了新的一课！在不偷看维基百科和狗狗的前提下，请设计以下四个λ项，T,F,AND,OR，从而使得 AND T T =>* T，AND T F =>* F, AND F T =>* F, AND F F => F, OR T T => T, OR T F =>* T, OR F T =>* T, OR F F =>* F！

#λ讲堂# (46) 偷偷告诉大家一个我的最新成果。我设计了一个λ项，因为太复杂，姑且叫它 NORMORNOT，可以用来判断任意一个λ项是否有范式，当且仅当 X 能够归约到范式时，NORMORNOT X =>* T；否则 NORMORNOT X =>* F。这可能是公元纪年以来 4 月 1 日这一天最伟大的发现哦！

#λ讲堂# (47) 当当当，万众期待的不动点（fixed point）今日登场！在数学上如果 x = f(x)，那么 x 就是函数 f 的不动点。提问 [1] 数学函数 f(x)=x * x 的不动点是什么？[2] 给定一个λ项 λf.(λx.f (x x)) (λx.f (x x))，通常简称 Y，那么对任意一个λ项 F，归约 Y F 会得到什么？

#λ讲堂# (48) 更新了一下 Lambda Viewer http://sinaurl.cn/hbrYEG，现在可以显示 redex 的层次。有兴趣的同学可以重新试一下第 43 和 44 课，记住别把α变换算在内就好了。

#λ讲堂# (49) 假设我们采用@兔山白 对45课的解答，定义 T = λf.λx.x 和 F = λf.λx.f x，那么在46课的基础上我又设计了一个 FAN = λm.(NORMORNOT m) (λx.y) ((λx.x x) (λx.x x))，意思就是如果 M 有范式，那 FAN M 就没有；如果 M 没有，FAN M 就有。请问是这样的吗？

#λ讲堂# (50) 在上一课之后，我突然发现有一个问题很纠结。根据第47课对 Y 的定义，归约 Y FAN 会得到范式吗？有木有很纠结？有木有？有木有！！！

#λ讲堂# (51) 第五十课其实就是歌德尔不完备定理（Gödel's incompleteness theorem）的一个例子。如果我们认为λ演算可以表达所有的函数（包括 NORMORNOT），那么就会产生悖论；如果我们不允许悖论存在，那么就有一些函数是无法写成λ项的，比如 NORMORNOT。

#λ讲堂# (52) 现在我们知道，虽然λ演算很强大，但是有些事情它还是无法做到的，比如用来判断一个λ项是否存在范式。λ演算到底有多强大呢？用它可以完成所有的被称之为计算或着算法的事情，就像一个理想（无限内存）的计算机。这就是 Church-Turing Thesis。

#λ讲堂# (53) Church-Turing Thesis 之所以叫做 thesis（命题），不叫 theorem（定理），是因为它是无法被证明的，它是个循环定义（tautology）：但凡能够用λ演算或者图灵机（理想计算机）计算或者表达出来的，就是可以计算（computable）或者能够称之为算法的。

#λ讲堂# (54) 课程到这里暂停一下吧，在进入下一阶段 type theory 之前，我们回顾一下前面的未完成的课程：35课还没有结论；38课已经被证否了；44课大家都没做对；45课还没有给出常规答案；47课还有个奇特处没被发现。我都追加了注释，欢迎大家温故而知新！


烂苹果乐园 by @九瓜

愚人节你别徘徊／快到#λ讲堂#来／欢迎织博的小孩／不要只是点转发／要咆哮体呼喊／向枯燥理论说拜拜／抽象！应用！／样样都简单／α！β！／奇妙的魔法／..／告诉What's Your Term／接受这归约吧／Normalize You／走进不停的循环／Choose Your Way／范式就在前方／小新啊／字数能多一点嘛！

烂苹果与八卦 by @兔山白 

第一日 天上像是出了两个太阳。熙凤对湘云说，真是热死人了。湘云说，你说这是不是传说中的热寂啊。熙凤笑了，你又发痴了，是热坏了脑袋还是看BBT（Big Bang)看多了？又说，镇里来了个姓邱的老道，卖烂苹果，不怕315啊？哦对了，明天我要出差了。湘云自言自语的说，那一定是个不平凡的人。

第二日 地倾东南，人心惶惶。狗头儿撞倒了白兔山。邱七创作了烂苹果之歌。故人来访，邱七相约同往。故人笑曰：关于那个.，我已经找到了。临别赠一物，又说，等你参透了，我就同你唱这首歌。

第三日 惊蛰。来了十个不平凡的少年，号称拯救地球大作战使命团。停电了，邱七拿出一面八卦镜，移烛相照，从乾位移到了坤位。贾君鹏大惊：乾坤大挪移？邱七不答，又从坤位挪到了震位。湘云也报了名。回来的路上，看到了一条蛇。大家开始训练，师傅说，所谓抽象，就是在25g的情况下的灵魂出窍。悟空问？25克？无限说，gravity，stupid。牛三金是南方人，被25g累得气喘吁吁，为什么这么烂（难）。

第四日 风向东南，辐射无忧。贾君鹏回家吃饭。牛三金回家过年。。。。剩下邱七，悟空，无限（AKA小林，麒麟，kylin)，湘云四人。挂帆东南，目标白兔山。

第五日 海水是那么的平静，那么的蓝。

第六日 白兔山到了，无限喊道。众人一看，根本没有什么山，只有一幡，上书白兔山三个大字，中国移动我也不动的垂在那里。悟空丧气的说：这就是传说中的白兔山，不给力啊，师傅。半晌，无限又喊，动了，动了，幡动了。邱七呵斥道：什么动不动，你不要动不动就说什么动不动。湘云寻思：难道这就是不动点。一行无话，踏上返程。

第七日 着火了。又是无限。众人惊惶，师傅在甲板上快烤成了Bak Guah。悟空说，师傅快走。邱七说：我命犯火，尤忌七数。末了又说：如如不动，急急如律 湘云陷入了沉思，她穿过时间的迷宫，看到了生命的终点，抽丝剥茧，眼看找到了答案，却不巧在语言这根筋上断了线。

第八日 醒醒，你醒醒 熙凤摇着湘云。二人打开房门，海水已经到了第八楼，地球已成泽国。熙凤说：等等，我去捉条鱼，给你做条正宗的糖醋鱼。湘云远眺，海天一线。不禁发出这样的天问，宇宙是无限的么，生命是有尽吗？熙凤说，那还用问，这个当然。可是那条蛇，湘云说，咬住了自己的尾巴。


解读：邱七/Church，狗头儿/Gödel，无限/Turing，白兔山/悖论，烂苹果/lambda，故人/?，乾/FFF，坤/TTT，震/TTF，蛇/循环（Y），25g/25课，幡/FAN，如如不动/α变换，急急如律/β归约

关于熙凤，应该是瓶子，因为没有入梦（上课）。而且曾经取笑过兔山白的糖醋排骨，所以最后安排她做“正宗”的糖醋鱼，哈哈！

关于湘云，应该是十慵。因为曾经预见了 Church-Rosser 定理，然后所做歌词里有“语言”二字。

关于故人，一说是因为不动点所以应该是 Banach 或者什么其他人；二说因为不完备定理所以应该是 Gödel。历史上的确 Gödel 是先去普林（Church 所在地）给过 talk，Church 和 Turing 的成果都是两年之后。

致敬：明明/结构＋火，鸟山明/悟空＋师傅＋25g，黄耀明/十个少年＋天问，贝克特/？，红楼梦/熙凤＋湘云＋楼＋梦，博尔赫斯/迷宫，金庸/乾坤大挪移，石康/?，欧阳峰张国荣王家卫/节气天象＋明天出差＋不动幡

关于贝可特我就知道等待戈多，不够了解。还有，为什么是石康？难道不是刘震云或者冯小刚？
